// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	"github.com/oklog/ulid/v2"
)

const (
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// Device defines model for Device.
type Device struct {
	Id   ULID   `json:"id"`
	Name string `json:"name"`
}

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ULID defines model for ULID.
type ULID = ulid.ULID

// WithId defines model for WithId.
type WithId struct {
	Id ULID `json:"id"`
}

// WithName defines model for WithName.
type WithName struct {
	Name string `json:"name"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Devices
	// (GET /devices)
	ListDevices(ctx echo.Context) error
	// Get Device
	// (GET /devices/{deviceId})
	GetDevice(ctx echo.Context, deviceId ULID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListDevices converts echo context to params.
func (w *ServerInterfaceWrapper) ListDevices(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDevices(ctx)
	return err
}

// GetDevice converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceId" -------------
	var deviceId ULID

	err = runtime.BindStyledParameterWithOptions("simple", "deviceId", ctx.Param("deviceId"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDevice(ctx, deviceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/devices", wrapper.ListDevices)
	router.GET(baseURL+"/devices/:deviceId", wrapper.GetDevice)

}

type ListDevicesRequestObject struct {
}

type ListDevicesResponseObject interface {
	VisitListDevicesResponse(w http.ResponseWriter) error
}

type ListDevices200JSONResponse []Device

func (response ListDevices200JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeviceRequestObject struct {
	DeviceId ULID `json:"deviceId"`
}

type GetDeviceResponseObject interface {
	VisitGetDeviceResponse(w http.ResponseWriter) error
}

type GetDevice200JSONResponse Device

func (response GetDevice200JSONResponse) VisitGetDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDevice404JSONResponse ErrorNotFound

func (response GetDevice404JSONResponse) VisitGetDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List Devices
	// (GET /devices)
	ListDevices(ctx context.Context, request ListDevicesRequestObject) (ListDevicesResponseObject, error)
	// Get Device
	// (GET /devices/{deviceId})
	GetDevice(ctx context.Context, request GetDeviceRequestObject) (GetDeviceResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListDevices operation middleware
func (sh *strictHandler) ListDevices(ctx echo.Context) error {
	var request ListDevicesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListDevices(ctx.Request().Context(), request.(ListDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDevices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListDevicesResponseObject); ok {
		return validResponse.VisitListDevicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDevice operation middleware
func (sh *strictHandler) GetDevice(ctx echo.Context, deviceId ULID) error {
	var request GetDeviceRequestObject

	request.DeviceId = deviceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDevice(ctx.Request().Context(), request.(GetDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDevice")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeviceResponseObject); ok {
		return validResponse.VisitGetDeviceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
